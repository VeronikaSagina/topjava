<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xsi:schemaLocation="http://www.springframework.org/schema/beans  http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context                    http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/jdbc                       http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
       http://www.springframework.org/schema/tx                         http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/data/jpa                   http://www.springframework.org/schema/data/jpa/spring-jpa.xsd">
    <beans profile="hsqldb">
        <context:property-placeholder location="classpath:db/hsqldb.properties" system-properties-mode="OVERRIDE"/>
        <bean id="dataSource"
              class="org.springframework.jdbc.datasource.DriverManagerDataSource"
              p:driverClassName="${database.driverClassName}"
              p:url="${database.url}"
              p:username="${database.username}"
              p:password="${database.password}"/>
    </beans>

    <beans profile="postgres">
        <context:property-placeholder location="classpath:db/postgres.properties" system-properties-mode="OVERRIDE"/>
        <bean id="dataSource"
              class="org.apache.tomcat.jdbc.pool.DataSource"
              p:driverClassName="${database.driverClassName}"
              p:url="${database.url}"
              p:username="${database.username}"
              p:password="${database.password}"/>
    </beans>

    <beans profile="jpa, datajpa">
        <jdbc:initialize-database data-source="dataSource" enabled="${database.init}">
            <jdbc:script location="classpath:db/${jdbc.initLocation}"/>
            <jdbc:script encoding="UTF-8" location="classpath:db/populateDB.sql"/>
        </jdbc:initialize-database>

        <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"
              p:dataSource-ref="dataSource"
              p:packagesToScan="ru.javawebinar.**.model">

                      <!--  <property name="jpaPropertyMap">
                            <map>
                                <entry key="#{T(org.hibernate.cfg.AvailableSettings).FORMAT_SQL}" value="${hibernate.format_sql}"/>
                                <entry key="#{T(org.hibernate.cfg.AvailableSettings).USE_SQL_COMMENTS}"
                                       value="${hibernate.use_sql_comments}"/>
                                <entry key="#{T(org.hibernate.cfg.AvailableSettings).CACHE_REGION_FACTORY}"
                                       value="org.hibernate.cache.ehcache.SingletonEhCacheRegionFactory"/>
                                <entry key="#{T(org.hibernate.cfg.AvailableSettings).USE_SECOND_LEVEL_CACHE}" value="true"/>
                                <entry key="#{T(org.hibernate.cfg.AvailableSettings).USE_QUERY_CACHE}"
                                       value="false"/> &lt;!&ndash;default&ndash;&gt;
                                <entry key="#{T(net.sf.ehcache.hibernate.AbstractEhcacheRegionFactory).NET_SF_EHCACHE_CONFIGURATION_RESOURCE_NAME}"
                                       value="cache/ehcache.xml"/>
                               &lt;!&ndash; <entry key="#{T(org.hibernate.cache.ehcache.AbstractEhcacheRegionFactory).NET_SF_EHCACHE_CONFIGURATION_RESOURCE_NAME}"
                                       value="cache/ehcache.xml"/>&ndash;&gt;
                            </map>
                        </property>-->
            <property name="jpaProperties">
                <props>
                    <prop key="org.hibernate.cfg.AvailableSettings.FORMAT_SQL">"${hibernate.format_sql}"</prop>
                    <prop key="org.hibernate.cfg.AvailableSettings.USE_SQL_COMMENTS">"${hibernate.use_sql_comments}"</prop>
                    <prop key="hibernate.cache.use_query_cache">true</prop>
                    <prop key="hibernate.cache.use_second_level_cache">true</prop>
                    <!--   <prop key="hibernate.cache.region.factory">org.hibernate.cache.jcache.JCacheRegionFactory</prop>
                       <prop key="hibernate.javax.cache.provider">org.ehcache.jsr107.EhcacheCachingProvider</prop>-->
                    <prop key="hibernate.cache.provider_class">org.hibernate.cache.EhCacheProvider</prop>
                    <prop key="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory
                    </prop>
                    <prop key="net.sf.ehcache.hibernate.AbstractEhcacheRegionFactory.NET_SF_EHCACHE_CONFIGURATION_RESOURCE_NAME">
                        cache/ehcache.xml
                    </prop>
                    <!--<prop key="javax.persistence.sharedCache.mode">ENABLE_SELECTIVE</prop>-->
                    <!--<prop key="hibernate.generate_statistics">true</prop>-->
                </props>
            </property>

            <property name="jpaVendorAdapter">
                <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"
                      p:showSql="${jpa.showSql}">
                </bean>
            </property>
        </bean>
        <!--transaction manager-->
        <tx:annotation-driven/>

        <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager"
              p:entityManagerFactory-ref="entityManagerFactory"/>

        <bean class="ru.javawebinar.topjava.repository.JpaUtil"/>
    </beans>

    <beans profile="jdbc">
        <context:component-scan base-package="ru.javawebinar.**.repository.jdbc"/>
        <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
            <constructor-arg ref="dataSource"/>
        </bean>
        <bean id="namedJdbcTemplate" class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">
            <constructor-arg ref="dataSource"/>
        </bean>
    </beans>

    <beans profile="jpa">
        <context:component-scan base-package="ru.javawebinar.**.repository.jpa"/>
    </beans>

    <beans profile="datajpa">
        <jpa:repositories base-package="ru.javawebinar.topjava.repository.datajpa"/>
        <context:component-scan base-package="ru.javawebinar.**.repository.datajpa"/>
    </beans>

</beans>

        <!---->
        <!-- -->

        <!-- populate data base -->

        <!--    <bean class="ru.javawebinar.topjava.util.DbPopulator">
                <constructor-arg name="dataSource" ref="dataSource"/>
                <constructor-arg name="scriptLocation" value="classpath:db/populateDB.sql"/>
            </bean>-->

        <!-- jdbcTemplate-->

        <!--<context:component-scan base-package="ru.javawebinar.topjava.repository.jdbc"/>-->
        <!-- <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
             <constructor-arg ref="dataSource"/>
         </bean>

         <bean id="namedJdbcTemplate" class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">
             <constructor-arg ref="dataSource"/>
         </bean>-->

        <!--dataSource-->

        <!--   <bean id="dataSource"
                 class="org.springframework.jdbc.datasource.DriverManagerDataSource">
               <property name="driverClassName" value="${database.driverClassName}"/>
               <property name="url" value="${database.url}"/>
               <property name="username" value="${database.username}"/>
               <property name="password" value="${database.password}"/>
           </bean>-->
